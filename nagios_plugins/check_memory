#!/usr/bin/env python3

import argparse
import nagiosplugin
import psutil

class MemoryCheck(nagiosplugin.Resource):
    def __init__(self, unit):
        self.unit = unit

    def probe(self):
        mem = psutil.virtual_memory()
        total = mem.total
        available = mem.available
        used = total - available
        if self.unit == 'M':
            multiple = 1024 * 1024
        elif self.unit == 'K':
            multiple = 1024
        elif self.unit == 'b':
            multiple = 1
        elif self.unit == 'G':
            multiple = 1024 * 1024 * 1024
        else:
            raise ValueError("Unit must be one of 'b', 'K', 'M', or 'G', case-sensitive.")
        free_bytes = available
        free_converted = available / multiple
        return [nagiosplugin.Metric('free_memory', free_converted, min=0, max=total / multiple, context='free_memory')]

@nagiosplugin.guarded
def main():
    argp = argparse.ArgumentParser()
    argp.add_argument('-w', '--warning', metavar='RANGE', default='',
                      help='return warning if occupancy is outside RANGE')
    argp.add_argument('-c', '--critical', metavar='RANGE', default='',
                      help='return critical if occupancy is outside RANGE')
    argp.add_argument('-u', '--unit', default='M', choices=['b', 'K', 'M', 'G'],
                      help="Unit to use for human-readable output. Can be 'b', 'K', 'M', or 'G' for bytes, KiB, MiB, or GiB respectively (default: 'M').")
    args = argp.parse_args()
    check = nagiosplugin.Check(
        MemoryCheck(args.unit),
        nagiosplugin.ScalarContext('free_memory', args.warning, args.critical))
    check.main()

if __name__ == '__main__':
    main()

