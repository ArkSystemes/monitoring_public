#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.db_mysql  # pylint: disable=C0413
import lib.shell  # pylint: disable=C0413
import lib.time  # pylint: disable=C0413
import lib.txt  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023051201'

DESCRIPTION = 'Checks expiration date of certificates in a XCA based MySQL/MariaDB database.'

DEFAULT_WARN = 14 # days
DEFAULT_CRIT = 5  # days
DEFAULT_DATABASE = 'xca'
DEFAULT_HOSTNAME = 'localhost'
DEFAULT_PASSWORD = ''
DEFAULT_USERNAME = 'root'

CMD_OPENSSL_CRT = 'openssl x509 -noout -dates -in /dev/stdin'
CMD_OPENSSL_CRL = 'openssl crl -noout -nextupdate -in /dev/stdin'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the critical for the expiration date in days. Default: %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--database',
        help='Set the MySQL database containing the XCA database. Default: %(default)s',
        dest='DATABASE',
        type=str,
        default=DEFAULT_DATABASE,
    )

    parser.add_argument(
        '-H', '--hostname',
        help='Set the hostname of the MySQL server containing the XCA database. '
             'Default: %(default)s',
        dest='HOSTNAME',
        type=str,
        default=DEFAULT_HOSTNAME,
    )

    parser.add_argument(
        '-p', '--password',
        help='Set the password for the MySQL server containing the XCA database. Default: %(default)s',
        dest='PASSWORD',
        type=str,
        default=DEFAULT_PASSWORD,
    )

    parser.add_argument(
        '--prefix',
        help='Set the table prefix of the XCA database.',
        dest='PREFIX',
        type=str,
    )

    parser.add_argument(
        '-u', '--username',
        help='Set the username for the MySQL server containing the XCA database. Default: %(default)s',
        dest='USERNAME',
        type=str,
        default=DEFAULT_USERNAME,
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the warning for the expiration date in days. Default: %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    mysql_connection = {
        'user':               args.USERNAME,
        'password':           args.PASSWORD,
        'host':               args.HOSTNAME,
        'database':           args.DATABASE,
    }
    conn = lib.base.coe(lib.db_mysql.connect(mysql_connection))
    state = STATE_OK

    # cert checking
    result = lib.base.coe(
        lib.db_mysql.select(
            conn,
            'select name, cert, ca, {prefix}certs_serial '
            'from xca.{prefix}view_certs '
            'where invaldate is null'.format(prefix=args.PREFIX)
        )
    )

    crt_count = 0
    expiring_crt_count = 0
    table_crts = []
    for row in result:
        # get the dict keys:
        name, cert, ca, serial = row
        crt_count += 1

        # add line break after 10th character, for the openssl command to always work
        pem_cert = '-----BEGIN CERTIFICATE-----\n{}\n{}\n-----END CERTIFICATE-----'.format(
            row[cert][:10], row[cert][10:])

        # execute the shell command and return its result and exit code
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(CMD_OPENSSL_CRT, stdin=pem_cert))
        for line in stdout.splitlines():
            if line.startswith('notAfter='):
                timestr = line.split('=')[1]       # Oct 29 08:41:00 2028 GMT
                timestr = lib.time.timestr2datetime(timestr, pattern='%b %d %H:%M:%S %Y %Z')
                delta = timestr - lib.time.now(as_type='datetime')
                crt_state = lib.base.get_state(delta.days, args.WARN, args.CRIT, _operator='le')
                table_crts.append({
                    'name': row[name],
                    'ca': 'y' if row[ca] == 1 else 'n',
                    'serial': row[serial],
                    'state': lib.base.state2str(crt_state, empty_ok=False),
                    'timestr': '{}'.format(timestr),
                })
                if crt_state != STATE_OK:
                    expiring_crt_count += 1
                    state = lib.base.get_worst(state, crt_state)
                break

    # crl checking
    result = lib.base.coe(
        lib.db_mysql.select(
            conn,
            'select name,crl from xca.{}view_crls order by date desc limit 1'.format(args.PREFIX)
        )
    )

    crl_count = 0
    expiring_crl_count = 0
    table_crls = []
    for row in result:
        # get the dict keys:
        name, cert = row
        crl_count += 1

        pem_cert = '-----BEGIN X509 CRL-----\n{}\n-----END X509 CRL-----'.format(row[cert])

        # execute the shell command and return its result and exit code
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(CMD_OPENSSL_CRL, stdin=pem_cert))
        for line in stdout.splitlines():
            if line.startswith('nextUpdate='):
                timestr = line.split('=')[1]       # Oct 29 08:41:00 2028 GMT
                timestr = lib.time.timestr2datetime(timestr, pattern='%b %d %H:%M:%S %Y %Z')
                delta = timestr - lib.time.now(as_type='datetime')
                crl_state = lib.base.get_state(delta.days, args.WARN, args.CRIT, _operator='le')
                table_crls.append({
                    'name': row[name],
                    'state': lib.base.state2str(crl_state, empty_ok=False),
                    'timestr': '{}'.format(timestr),
                })
                if crl_state != STATE_OK:
                    expiring_crl_count += 1
                    state = lib.base.get_worst(state, crl_state)
                break

    # create the message
    msg = '{} {} and {} {} checked. '.format(
        crt_count,
        lib.txt.pluralize('Certificate', crt_count),
        crl_count,
        lib.txt.pluralize('CRL', crl_count)
    )

    if expiring_crt_count > 0:
        msg += '{} {} {} expiring. '.format(
            expiring_crt_count,
            lib.txt.pluralize('Certificate', expiring_crt_count),
            lib.txt.pluralize('', expiring_crt_count, 'is,are')
        )
    if expiring_crl_count > 0:
        msg += '{} {} {} expiring.'.format(
            expiring_crl_count,
            lib.txt.pluralize('CRL', expiring_crl_count),
            lib.txt.pluralize('', expiring_crl_count, 'is,are')
        )

    if len(table_crts) > 0:
        msg += '\n\nCertificates:\n'
        msg += lib.base.get_table(
            table_crts,
            ['name', 'ca', 'serial', 'state', 'timestr'],
            header=['commonName', 'CA', 'Serial', 'State', 'Expiry date'],
        )
    if len(table_crls) > 0:
        msg += '\nCRLs:\n'
        msg += lib.base.get_table(
            table_crls,
            ['name', 'state', 'timestr'],
            header=['commonName', 'State', 'Expiry date'],
        )

    # over and out
    lib.base.oao(msg, state)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
