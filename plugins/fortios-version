#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import sys  # pylint: disable=C0413
import urllib.parse  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.url  # pylint: disable=C0413
import lib.time  # pylint: disable=C0413
import lib.version  # pylint: disable=C0413
from lib.globals import (STATE_UNKNOWN) # pylint: disable=C0413

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023051201'

DESCRIPTION = 'Tracks if FortiOS is EOL.'

DEFAULT_INSECURE = False
DEFAULT_NO_PROXY = False
DEFAULT_TIMEOUT  = 3

# from https://endoflife.date/api/fortios.json
ENDOFLIFE_DATE = [
  {
    "cycle": "7.2",
    "eol": "2026-09-30",
    "support": "2025-03-31",
    "releaseDate": "2022-03-31",
    "lts": False
  },
  {
    "cycle": "7.0",
    "eol": "2025-09-30",
    "support": "2024-03-30",
    "releaseDate": "2021-03-30",
    "lts": False
  },
  {
    "cycle": "6.4",
    "eol": "2024-09-30",
    "support": "2023-03-31",
    "releaseDate": "2020-03-31",
    "lts": False
  },
  {
    "cycle": "6.2",
    "eol": "2023-09-28",
    "support": "2022-03-28",
    "releaseDate": "2019-03-28",
    "lts": False
  },
  {
    "cycle": "6.0",
    "eol": "2022-09-29",
    "support": "2021-03-29",
    "releaseDate": "2018-03-29",
    "lts": False
  }
]


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-H', '--hostname',
        help='FortiOS-based Appliance address, optional including port ("192.0.2.1:443").',
        dest='HOSTNAME',
        required = True,
    )

    parser.add_argument(
        '--insecure',
        help='This option explicitly allows to perform "insecure" SSL connections. '
             'Default: %(default)s',
        dest='INSECURE',
        action='store_true',
        default=DEFAULT_INSECURE,
    )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy. Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
    )

    parser.add_argument(
        '--password',
        help='FortiOS REST API Single Access Token.',
        dest='PASSWORD',
        required = True,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    url = 'https://{}/api/v2/monitor/system/firmware/?access_token={}'.format(
        args.HOSTNAME,
        urllib.parse.quote(args.PASSWORD),
    )
    result = lib.base.coe(lib.url.fetch_json(
        url,
        insecure=args.INSECURE,
        no_proxy=args.NO_PROXY,
        timeout=args.TIMEOUT,
    ))
    installed_version = result['results']['current']['version'].replace('v', '')
    if not installed_version:
        lib.base.oao('FortIOS not found.', STATE_UNKNOWN)
    try:
        installed_major, installed_minor, installed_patch = installed_version.split('.')
    except:
        installed_patch = '0'
        installed_major, installed_minor = installed_version.split('.')

    state, msg = lib.version.check_eol(
        ENDOFLIFE_DATE,
        '{}.{}'.format(installed_major, installed_minor),
    )

    # over and out
    lib.base.oao(
        'FortIOS v{} ({})'.format(installed_version, msg),
        state,
        lib.base.get_perfdata(
            'fortios-version',
            '{}.{}{}'.format(installed_major, installed_minor, installed_patch),
            None,
            None,
            None,
            0,
            None,
        ),
        always_ok=args.ALWAYS_OK,
    )


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
