#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import json  # pylint: disable=C0413
import os  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.shell  # pylint: disable=C0413
import lib.version  # pylint: disable=C0413
from lib.globals import (STATE_UNKNOWN) # pylint: disable=C0413

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023051201'

DESCRIPTION = 'Tracks if Nextcloud is EOL.'

DEFAULT_PATH = '/var/www/html/nextcloud'

# from https://endoflife.date/api/nextcloud.json
ENDOFLIFE_DATE = [
  {
    "cycle": "26",
    "releaseDate": "2023-03-21",
    "eol": "2024-03-01",
    "latest": "26.0.0",
    "latestReleaseDate": "2023-03-21",
    "lts": False
  },
  {
    "cycle": "25",
    "releaseDate": "2022-10-18",
    "eol": "2023-10-01",
    "latest": "25.0.5",
    "latestReleaseDate": "2023-03-23",
    "lts": False
  },
  {
    "cycle": "24",
    "releaseDate": "2022-05-02",
    "eol": "2023-05-01",
    "latest": "24.0.11",
    "latestReleaseDate": "2023-03-23",
    "lts": False
  },
  {
    "cycle": "23",
    "releaseDate": "2021-11-26",
    "eol": "2022-12-01",
    "latest": "23.0.12",
    "latestReleaseDate": "2022-12-08",
    "lts": False
  },
  {
    "cycle": "22",
    "releaseDate": "2021-07-05",
    "eol": "2022-07-01",
    "latest": "22.2.10",
    "latestReleaseDate": "2022-07-18",
    "lts": False
  },
  {
    "cycle": "21",
    "releaseDate": "2021-02-19",
    "eol": "2022-02-01",
    "latest": "21.0.9",
    "latestReleaseDate": "2022-02-15",
    "lts": False
  },
  {
    "cycle": "20",
    "releaseDate": "2020-10-02",
    "eol": "2021-01-01",
    "latest": "20.0.14",
    "latestReleaseDate": "2021-11-11",
    "lts": False
  },
  {
    "cycle": "19",
    "releaseDate": "2020-05-26",
    "eol": "2021-06-01",
    "latest": "19.0.13",
    "latestReleaseDate": "2021-07-01",
    "lts": False
  },
  {
    "cycle": "18",
    "releaseDate": "2020-01-17",
    "eol": "2021-01-01",
    "latest": "18.0.14",
    "latestReleaseDate": "2021-01-25",
    "lts": False
  },
  {
    "cycle": "17",
    "releaseDate": "2019-09-26",
    "eol": "2020-01-01",
    "latest": "17.0.10",
    "latestReleaseDate": "2020-10-08",
    "lts": False
  },
  {
    "cycle": "16",
    "releaseDate": "2019-04-24",
    "eol": "2020-06-01",
    "latest": "16.0.11",
    "latestReleaseDate": "2020-06-04",
    "lts": False
  }
]


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--path',
        help='Local path to your Nextcloud installation, typically within your Webserver\'s '
             'Document Root. Default: %(default)s',
        dest='PATH',
        default=DEFAULT_PATH,
    )

    return parser.parse_args()


def get_owner(file):
    """Returns the user ID of the owner of a file (for example "0" for "root").
    Returns -1 on failure.
    """
    try:
        return os.stat(file).st_uid
    except:
        return -1


def run_occ(path, cmd, _format='json'):
    """Run the Nextcloud OCC command.
    """
    # get the owner of config.php
    user = get_owner(os.path.join(path, 'config/config.php'))
    occ = os.path.join(path, 'occ')
    # When running a command as a UID, many shells require
    # that the `#` be escaped with a backslash (`\`).
    stdout, stderr, retc = lib.base.coe(
        lib.shell.shell_exec('sudo -u \\#{} {} {}'.format(user, occ, cmd))
    )
    if stderr:
        lib.base.oao('{}'.format(stderr), STATE_UNKNOWN)
    try:
        if _format == 'json':
            return json.loads(stdout)
        return stdout.strip()
    except:
        lib.base.oao('ValueError: No JSON object could be decoded', STATE_UNKNOWN)


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    config = run_occ(args.PATH, 'config:list')
    try:
        # varying version strings: '16.0.11' (2 dots) or '25.0.4.2' (3 dots)
        installed_version = config['system']['version'].split('.')
        installed_major = installed_version[0]
    except:
        lib.base.oao('Unable to get Nextcloud version information.', STATE_UNKNOWN)
    if not installed_version:
        lib.base.oao('Nextcloud not found.', STATE_UNKNOWN)

    state, msg = lib.version.check_eol(
        ENDOFLIFE_DATE,
        installed_major,
    )

    # over and out
    lib.base.oao(
        'Nextcloud v{} ({})'.format('.'.join(installed_version), msg),
        state,
        lib.base.get_perfdata(
            'nextcloud-version',
            '{}.{}'.format(installed_major, ''.join(installed_version[1:])),
            None,
            None,
            None,
            0,
            None,
        ),
        always_ok=args.ALWAYS_OK,
    )


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
