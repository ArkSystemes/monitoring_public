#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.disk  # pylint: disable=C0413
import lib.version  # pylint: disable=C0413
from lib.globals import (STATE_UNKNOWN) # pylint: disable=C0413

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023051201'

DESCRIPTION = 'Tracks if Keycloak is EOL.'

DEFAULT_PATH = '/opt/keycloak'

# from https://endoflife.date/api/keycloak.json
ENDOFLIFE_DATE = [
  {
    "cycle": "21.0",
    "releaseDate": "2023-02-23",
    "eol": False,
    "latest": "21.0.1",
    "latestReleaseDate": "2023-03-01",
    "lts": False
  },
  {
    "cycle": "20.0",
    "releaseDate": "2022-11-01",
    "eol": "2023-02-23",
    "latest": "20.0.5",
    "latestReleaseDate": "2023-02-21",
    "lts": False
  },
  {
    "cycle": "19.0",
    "releaseDate": "2022-07-27",
    "eol": "2022-11-01",
    "latest": "19.0.3",
    "latestReleaseDate": "2022-10-06",
    "lts": False
  },
  {
    "cycle": "18.0",
    "releaseDate": "2022-04-20",
    "eol": "2022-07-27",
    "latest": "18.0.2",
    "latestReleaseDate": "2022-06-24",
    "lts": False
  },
  {
    "cycle": "17.0",
    "releaseDate": "2022-03-11",
    "eol": "2022-04-20",
    "latest": "17.0.1",
    "latestReleaseDate": "2022-03-23",
    "lts": False
  },
  {
    "cycle": "16.1",
    "releaseDate": "2021-12-20",
    "eol": "2022-03-11",
    "latest": "16.1.1",
    "latestReleaseDate": "2022-01-25",
    "lts": False
  },
  {
    "cycle": "16.0",
    "releaseDate": "2021-12-17",
    "eol": "2021-12-20",
    "latest": "16.0.0",
    "latestReleaseDate": "2021-12-17",
    "lts": False
  },
  {
    "cycle": "15.1",
    "releaseDate": "2021-12-10",
    "eol": "2021-12-17",
    "latest": "15.1.1",
    "latestReleaseDate": "2021-12-17",
    "lts": False
  },
  {
    "cycle": "15.0",
    "releaseDate": "2021-07-30",
    "eol": "2021-12-10",
    "latest": "15.0.2",
    "latestReleaseDate": "2021-08-20",
    "lts": False
  },
  {
    "cycle": "14.0",
    "releaseDate": "2021-06-18",
    "eol": "2021-07-15",
    "latest": "14.0.0",
    "latestReleaseDate": "2021-06-18",
    "lts": False
  },
  {
    "cycle": "13.0",
    "releaseDate": "2021-05-06",
    "eol": "2021-06-18",
    "latest": "13.0.1",
    "latestReleaseDate": "2021-05-25",
    "lts": False
  },
  {
    "cycle": "12.0",
    "releaseDate": "2020-12-16",
    "eol": "2021-05-06",
    "latest": "12.0.4",
    "latestReleaseDate": "2021-03-01",
    "lts": False
  },
  {
    "cycle": "11.0",
    "releaseDate": "2020-07-22",
    "eol": "2020-12-16",
    "latest": "11.0.3",
    "latestReleaseDate": "2020-11-05",
    "lts": False
  },
  {
    "cycle": "10.0",
    "releaseDate": "2020-04-29",
    "eol": "2020-07-22",
    "latest": "10.0.2",
    "latestReleaseDate": "2020-06-02",
    "lts": False
  }
]


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--path',
        help='Local path to your Keycloak installation. Default: %(default)s',
        dest='PATH',
        default=DEFAULT_PATH,
    )

    return parser.parse_args()


def get_installed_version(path):
    success, version = lib.disk.grep_file(path + '/version.txt', r'n (.*)')
    if not success:
        return ''
    return version


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    installed_version = get_installed_version(args.PATH)
    if not installed_version:
        lib.base.oao('Keycloak not found.', STATE_UNKNOWN)
    try:
        installed_major, installed_minor, installed_patch = installed_version.split('.')
    except:
        installed_patch = '0'
        installed_major, installed_minor = installed_version.split('.')

    state, msg = lib.version.check_eol(
        ENDOFLIFE_DATE,
        '{}.{}'.format(installed_major, installed_minor),
    )

    # over and out
    lib.base.oao(
        'Keycloak v{} ({})'.format(installed_version, msg),
        state,
        lib.base.get_perfdata(
            'keycloak-version',
            '{}.{}{}'.format(installed_major, installed_minor, installed_patch),
            None,
            None,
            None,
            0,
            None,
        ),
        always_ok=args.ALWAYS_OK,
    )


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
